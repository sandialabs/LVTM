### Tasks to resolve BEFORE the next public release (may be redundantly listed both here and elsewhere) ###
* Display of version info in upper-right corner
** Need to strip off suffix from VI name (after and including double underscore).
** No code yet exists to populate the registry with this info.
* Pause.vi used to work, now does not.
* Enable/Disable tool from executing
######

### COMPLETED FEATURES ###
X Add tip strips in appropriate places, including the control for "Search Clones Up To".  This needs to explain what kinds of clones won't and will be searched for.
X Make the tool accessible from the LV "Tools" menu.
X Refresh should include re-checking for new app instances.
X Recheck for new app instances upon mouse over "App Instance" control.
X Do not limit multi-selection to siblings only
X Do not allow selection of parent libraries
X For "Clone VIs FG", consider making the "Add Calling VI" case the default case.  See comment in that VI.
X Tree right-click menu now allows for Expand All / Collapse All (called Open All Items / Close All Items).
X Items not belonging to a parent library are now grouped in tree under "<no parent library>".
X The "Pause" VI implements User Events internally, but developers using this tool should NOT wire to the Pause User Event terminals.  Mark these terminals as Connection Optional, and add some text to the VI description warning the developer to NOT wire these terminals.
X The LVTM "Regression Tests" VIs are located below the vi.lib folder, and are thus excluded from view in LVTM, unless the exclude option (on by default) is turned off.  Configure the build-spec to place these VIs elsewhere.
X Prevent the top tree item being selected, after a refresh operation.
X Prevent the tree from being automatically expanded upon a refresh operation.
X Persist current column sorting after a refresh operation.
X The collapsed/expanded state of each library node in the tree should persist after a refresh operation.
X Optimizations per Neil Pate: <http://lavag.org/topic/14921-labview-task-manager/?p=109249>
X Fixes/Enhancements per xceric: <http://lavag.org/topic/14921-labview-task-manager/?p=108665>
X When an attempt to abort a non-abortable VI is made, an "error" message currently appears in the "Library Name" column.  This should be changed to appear in the "State" column.
######

### FUTURE BASE FEATURES ###
* When sorted DESCENDING on the "State" column, the tree is also (incorrectly) sorted descending by top node name (library/class name).
** Also, re-sort on each Refresh operation
* Until Help>About is implemented, display the tool's version number on the FP.
* BUG: As of R6, item type filtering is applied early in the discovery process, causing items to not get properly filtered once the next two of three "find all clones" VIs are called (they are inserted back in again).  According to <http://lavag.org/topic/14921-labview-task-manager/page-2#entry89848>, the Find Clones VI was intended to "be inserted into the list of VIs after filtering".
* BUG: Trap error when any operation (Open, Close, Hilite, Pause, etc.) is attempted on a library.  Possibly solved by "Do not allow selection of parent libraries"?
* BUG: Trap error when certain operations are attempted on non-runnable VIs (example: double-click on a .ctl).
* Improvments to grouping: 
** Indicate how many child nodes exist below each parent node.
** In 1st column of tree, items currently displayed under <no parent library>: 
*** group by .llb
*** group by folder
*** group clones below reentrant original (use some symbol to indicate that clones are present)
* Currently "Open BD" works as expected.  Improve this to also minimize the FP, but only if the FP was not already open.
* Add to the readme file "What use cases would this tool help me with?"
* Add logging to error file.
* Prevent ability to attempt abort on a subVI (these cannot be aborted).  Gray out?
* Add a "Help" menu item (see Ton Plomp's Code Capture Tool for a very nice implementation of a multi-tabbed Help window).
** Add a Help>About menu item (or in a separate tab).
** To fully comply with the BSD license terms, include copyright info (or tab).
** Add a Help>Support menu item (or tab), directing users to the LAVAcr page for LVTM Support <http://lavag.org/topic/18322-cr-labview-task-manager>.
* Add functionality to "Retain Wire Values" on all selected VIs.  <https://lavag.org/topic/16491-how-to-retail-wire-values-for-entire-vi-hierarchy/>
* Add functionality to "Suspend when Called" on all selected VIs.
* Merge columns "Reentrant" and "Reentrancy Type" into one column with three possible modes: NotReentrant, Preallocated, Shared.
* Cause a value of zero in "Search Clones Up To" to filter out all statically-referenced clones.  The goal is to display no MORE clones than this value.
* Optimize performance: 
** Try turning off "disable click" argument to "Set Busy.vi" (x2?), to see if UI responsiveness improves.
** Investigate if the "Get VI Dependencies" Method parameter "Whole Hierarchy" could be used to return all dependencies at once, therefore avoiding looping on each VI already in memory.  Verify what LV versions this parameter is available in.
** The "Hidden Gems in vi.lib" palette includes a "Tree Sorter" function.  Will this sort both alpha and numerically?  If so, consider replacing the existing "Sort Tree Items by Numerical order" project VI with this Hidden Gem.
** "May be use ['Add Multiple Items to End' method] instead of adding each item individually" <http://lavag.org/topic/14921-labview-task-manager/?p=90037>  An explanation is here: <http://www.notatamelion.com/2015/09/14/a-tree-grows-in-brooklyn-labview/>
** Spawn a background task to continuously run the "update" code in its own thread, but at a lower priority than the UI thread.  Only update the tree and front panel IF a change is detected.
* Show columns indicating if a VI's FP/BD are currently open or closed.  Optionally click on these columns to open them, shift-click to close them.  Inspired by post from drjdpowell: <http://lavag.org/topic/14921-labview-task-manager/page-3#entry92739>
* Option to group by library or not (flat list).  Flat is useful when wanting to sort by columns State, Paused?, Hilite?, Reentrant, etc.
** If grouped is active, hide the column "Library Name".
** If grouped is NOT active, remove visual selections for Expand All / Collapse All.
* If the above "option to group by library or not (flat list)" is not implemented for the State column, then some other way of grouping all VIs with a state of RunTop is needed (or perhaps provide both).  One possible alternative would be to provide a new filter option for VI State, allowing to temporarily hide all VIs with a state of Idle or Running.  This is highly desired when wanting to quickly find all VIs that can be aborted, or to discover what VIs might be still running (unknowingly) in the background.
* Add options to Show/hide particular columns such as Code Size, Data Size, etc.  Use ConfigInfo cluster to hold and persist these User Preferences.
** Possibly also save these preferences between sessions (Win Registry?, .ini file?).
* Include a "Tools" item on menu bar.  Create a plug-in architecture allowing users to launch their own LV debugging tools from here, simply by dropping their own tool VIs into a "plugins" folder.
** Include the following tools to get them started:  
*** Output_Debug_String.vi by Fabian Töpper, <http://fabiantoepper.de/get-debug-messages-from-labview-applications>.
*** WinDebugLogging.vi by Dr. Damien (DFGray), <https://forums.ni.com/t5/LabVIEW/Dr-Damien-s-Development-Debugging-Race-Conditions/td-p/802620>.
*** A tool to find and list all dependent DLL files.  See <http://www.evernote.com/shard/s286/sh/bc26a3f8-2c02-47b7-9a10-6a42761c1455/7766648ffe434144c2804f1429202977>.
*** A tool to search a LV project (or app instance) for possible dynamically launched VIs.  The intent is to help the user find all CBR or Run method VIs into which they may want to place the "Clone VIs FG" drop-in VI (Clone Beacon).  Such a tool would need to search for the 'Open VI Reference' primitive, AND Static VI References, and then extract the name of each associated VI.
*** Custom Cluster-Probe Builder, by TimVargo, but not yet written.  Write a Quick Drop plugin VI that will, using LV Scripting methods, determine the structure of the cluster from the selected wire (wire selection required prior to invoking QD), then build a custom probe unique to that cluster.  Search first to see if this has already been done.
*** Some generally useful Custom Probes could be bundled with LVTM, but these could not be invoked from this Tools menu.  Still, an item in this Tools menu could lead users to a handful of especially useful Custom Probes, such as: 
**** VI Box Probes, by Saphir
**** Variant Probe, by Ton Plomp
**** WinDebugLoggingProbe, by TimVargo
BUG: If a VI is paused/unpaused from the VI's own toolbar, pause symbol in LVTM is not synced.
* Consider reversing the logic of the item type filters, for consistency.  Currently these are checked to EXCLUDE the associated type, but this is the opposite logic to that used in the VI Hierarchy view, where item types are selected to be INCLUDED.
* Track start-stop and runtime <http://lavag.org/topic/14921-labview-task-manager/?p=89522>.
** Similar to the existing "Clone Beacon", a new DropIn VI could be created to track VI execution events.  This could enable a snapshot of the VI's control and indicator values, as of the last call.  DO NOT REINVENT the DETT!  Consider a new right-click menu option to then display these values, perhaps in a tree view similar to the Variant Probe.
* More columns?  (will need a mechanism to hide/display selected columns, or perhaps spawn separate tables)
** list each VI's Caller.  Inspired by SJ_Buddy: <http://lavag.org/topic/14921-labview-task-manager/?p=105474>
** Exec.PrefSys (VI Server > SubsystemVI > Properties > Execution > Preferred Exec System)
** Other properties from (VI Server > SubsystemVI > Properties).  A "Properties Popper"?
* Searching the PROJECT for VIs would allow for including VIs that are NOT currently "in memory".  Include a column indicating if "In Memory" or not, OR group these under a node called <In Project But Not In Memory>.  This would be helpful in locating dynamically loaded VIs.
* Investigate parameters of the "Get VI Dependencies" method, to see if any of them might be helpful with finding even more VIs.  Candidates are: 
** Static VI Refs?  (these are already listed since already in memory)
** Dynamic Dispatching? (optional?)
** Include Missing Items? (optional?)
** Load Block Diagram? (be careful with this one, may slow the tool to a crawl!  Unclear how it would be helpful anyway)
* Create a method to locate a VI in the tree, by dragging a marker from the tool into a window (FP or BD) of the VI to be located.  Inspired by Process Explorer from Sysinternals.
* This entire tool deserves a nice custom icon!
* Could the inability to Abort SubVIs be solved by automating a process that would: 
** Get the SubVI's current Front Panel state (open or closed)
** Open the SubVI's FP
** Programmatically send the 'Ctrl+.' keystroke ("Stop" VI)
** Close the FP if it was originally not already open
** Repeat in a loop for multiple selections
*** Would this work for reentrant clones?  The FP of a reentrant clone CAN be opened.
*** This CAN work, but ONLY under certain circumstances.  I've seen this work on instantiated reentrant clones (had ":ddddddd" appended to their names), IF they were launched with "Start Asynchronous Call", AND their caller VI has since gone idle.  These clones showed their execution state as 'RunSub' (running), and were not affected by trying to use the Abort method on them; but their Stop icon was available, as was Stop (Ctrl+.) on their Operate menus, and they did stop (execution state changed to "Idle").  The same did not work on their master VI, but the master went idle as soon as all of its clones went idle.  Execution State "RunSub" can mean either of "Running" OR "Waiting to Run".  Abortable RunSub VIs called by "Start Asynchronous Call" have a state of "Running", and have an attribute of "ACBRProxyCaller.dddddddd".
* Investigate Client.lvclass:OpenPorts.vi:Instance
  (what does ":Instance" mean?)  Notice that it is a parent library
* A similar tool exists on the LabVIEW Tools Network, called "Project Filter and Edit" <http://www.abcdef.biz/FilterAndEdit.htm>.  That tool however seems to focus on batch editing of VI properties, while LVTM focuses on runtime debugging & troubleshooting.
######

### FUTURE FEATURES FOR A "PREMIUM FEATURES" ADDON FOR LVTM ###
* Add a bottom "Status Bar".  Include the following: 
** A count of all items in tree, observing the file type filters.
** A count of currently selected tree items
** Indication of progress during a manual refresh operation.  Consider a bar, circle, or simple text (e.g. 117 of 283 items loaded).
** Error messages, such as when an attempt is made to Abort a non-abortable VI.
* Further improvements to grouping: 
** User defined grouping.
*** Hilight two or more items, raise right-click menu, select "Group", and a parent node gets created.
*** A right-click on the new parent node provides an option to "Ungroup".
* Right-click options as alternate ways to perform current button functions.  Needs to work with multiple selections as well as single.
* Add an "All" option to the "Application Instance" dropdown selector.  This will help with use cases where multiple projects are related to each other, such as server/clients that run in individual app instances.
* Automate the refresh function, so that F5 (optionally) need not be pressed.  Spawn an independent background task that continuously loops the "refresh" code in its own thread, at a lower priority than the UI thread, continuously determining "All VIs in Memory".  Compare that list with a cached list of the previous results, and update the tree ONLY IF a change is detected.  A new user setting will provide for "Automatic" or "Manual (F5)" refresh operation.

* Finish the find & filter functions.
* Display "CPU Load" for individual VIs.  Particularly useful when the tree is sorted by this column.
######

### THOUGHTS ###
O Will it (or can it be made to) work while remote debugging?  If Debug Server is being used to debug VIs on a remote machine, and the local development environment has LVTM installed, will it work seamlessly?
O IF POSSIBLE -- Allow this tool to run as a built executable.  This would likely focus around replacing the Read Property node: "App.AllVIs" with "App.ExportedVIs"
    * The former "Returns a list of VIs in memory for the specified application instance."
        # This property returns an error if you wire a remote application reference to the reference input. For a remote application, use the Exported VIs in Memory property to return a list of exported VIs.
    * The later "Returns a list of exported VIs in memory."
        # This property is similar to the Exported VIs list option in the Exported VIs section on the VI Server page of the Options dialog box.
    * The article at <http://www.mooregoodideas.com/vi-server-in-built-executables/> suggests that this IS indeed possible!
    * It may be that this tool CANNOT be run as a separate process.  VI Analyzer indicates several functions as "not compatible with executable".  There are lots of VI Scripting functions used, but this should not be a problem as long as a full IDE is installed.
    * What about building an executable to include as much functionality as possible, which optionally calls a separate library (.lvlib?, .llb?, .plvlib?) of functions which can only be used when a full IDE is detected?  The executable portion could still provide a subset of functionality within a Runtime Engine environment.
######
