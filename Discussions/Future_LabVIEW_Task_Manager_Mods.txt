X Add tip strips in appropriate places, including the control for "Search Clones Up To".  This needs to explain what kinds of clones won't and will be searched for.
X Make the tool accessible from the LV "Tools" menu.
X Refresh should include re-checking for new app instances.
* BUG: As of R6, item type filtering is applied early in the discovery process, causing items to not get properly filtered once the next two of three "find all clones" VIs are called (they are inserted back in again).  According to <http://lavag.org/topic/14921-labview-task-manager/page-2#entry89848>, the Find Clones VI was intended to "be inserted into the list of VIs after filtering".
* BUG: Trap error when any operation (Open, Close, Hilite, Pause, etc.) is attempted on a library.
* The LVTM "Regression Tests" VIs are located below the vi.lib folder, and are thus excluded from view in LVTM, unless the exclude option (on by default) is turned off.  Configure the build-spec to place these VIs elsewhere.
* Add an "All" option to the "Application Instance" dropdown selector.  This will help with use cases where multiple projects are related to each other, such as server/clients that run in individual app instances.
* Add to the readme file "What use cases would this tool help me with?"
* Add logging to error file.
* The collapsed/expanded state of each library in the list should persist after a refresh operation.
* Automate the refresh function, so that F5 need not be pressed.  Spawn an independent process that continuously determines "All VIs in Memory", compares that list with a cached list of the previous results, and sends the refreshed list to its caller VI ONLY IF a change is detected.
* Prevent ability to attempt abort on a subVI (these cannot be aborted).  Gray out?
* Finish the find & filter functions.
* Show a count of all items in tree, observing the file type filters.  Show this value in the existing subpanel.
* Add a "Help" menu item
** To fully comply with the BSD license terms, add a Help>About menu item, and include copyright info.
** Add a Help>Support menu item, directing users to the LAVAcr page for LVTM Support <http://lavag.org/topic/18322-cr-labview-task-manager>.
* Merge columns "Reentrant" and "Reentrancy Type" into one column with three possible modes: NotReentrant, Preallocated, Shared.
* Cause a value of zero in "Search Clones Up To" to filter out all statically-referenced clones.  The goal is to display no MORE clones than this value.
* Optimize performance: 
** "May be use add multiple items to tree instead of adding each item individually" <http://lavag.org/topic/14921-labview-task-manager/?p=90037>
** Optimizations per Neil Pate: <http://lavag.org/topic/14921-labview-task-manager/?p=109249>
** Fixes/Enhancements per xceric: <http://lavag.org/topic/14921-labview-task-manager/?p=108665>
* Show columns indicating if a VI's FP/BD are currently open or closed.  Optionally click on these columns to open them, shift-click to close them.  Inspired by post from drjdpowell: <http://lavag.org/topic/14921-labview-task-manager/page-3#entry92739>
* Option to group by library or not (flat list).  Flat is useful when wanting to sort by columns State, Paused?, Hilite?, Reentrant, etc.
** If grouped is active, hide the column "Library Name" (CAUTION! This field is used to display the message "Error" when an operation fails).
** If grouped is active, menu items allow to Expand All / Collapse All.
* Use a mechanism (.ini file?) to hold and persist User Preferences.  Include: default value for "Search Clones Up To", default value for Group/Flat option, initially launch tree as Expanded/Collapsed (if grouping option = Grouped), show/hide some columns such as Code Size, Data Size, etc.
* Include a "Tools" item on menu bar.  Create a plug-in architecture allowing users to launch their own LV debugging tools from here, simply by dropping their own tool VIs into a "plugins" folder.
** Include the following tools to get them started:  
*** A tool to find and list all dependent DLL files.  See <http://www.evernote.com/shard/s286/sh/bc26a3f8-2c02-47b7-9a10-6a42761c1455/7766648ffe434144c2804f1429202977>.
*** A tool to search a LV project (or app instance) for likely ACBR VIs.  The intent is to help the user find all ACBR VIs into which they may want to place the "Clone VIs FG" drop-in VI.
* Right-click options as alternate ways to perform current button functions.  Needs to work with multiple selections as well as single.
* Consider reversing the logic of the item type filters, for consistency.  Currently these are checked to EXCLUDE the associated type, but this is the opposite logic to that used in the VI Hierarchy view, where item types are selected to be INCLUDED.
* For "Clone VIs FG", consider making the "Add Calling VI" case the default case.  See comment in that VI.
* Track start-stop and runtime <http://lavag.org/topic/14921-labview-task-manager/?p=89522>.
* Include a column that lists each VI's Caller.  Inspired by SJ_Buddy: <http://lavag.org/topic/14921-labview-task-manager/?p=105474>
* This entire tool deserves a nice custom icon!
* Could the inability to Abort SubVIs be solved by automating a process that would: 
** Get the SubVI's current Front Panel state (open or closed)
** Open the SubVI's FP
** Programmatically send the 'Ctrl-.' keystroke ("Stop" VI)
** Close the FP if it was originally not already open
** Repeat in a loop for multiple selections
*** Would this work for reentrant clones?  Can the FP of a reentrant clone be opened?  If not then would have to abort ALL clones by aborting the master parent.


O IF POSSIBLE -- Allow this tool to run as a separate process.  This would likely focus around replacing the Read Property node: "App.AllVIs" with "App.ExportedVIs"
    * The former "Returns a list of VIs in memory for the specified application instance."
        # This property returns an error if you wire a remote application reference to the reference input. For a remote application, use the Exported VIs in Memory property to return a list of exported VIs.
    * The later "Returns a list of exported VIs in memory."
        # This property is similar to the Exported VIs list option in the Exported VIs section on the VI Server page of the Options dialog box.
    * It may be that this tool CANNOT be run as a separate process.  VI Analyzer indicates several functions as "not compatible with executable".  There are lots of VI Scripting functions used, but this should not be a problem as long as a full IDE is installed.
